Assign 1 


-- 1. Show the cname, Acc_Type, amount information of customer who is having an saving account.
SELECT c.Cname, a.Acc_Type, a.Amount
FROM Customer c
JOIN Account a ON c.C_Id = a.C_Id
WHERE a.Acc_Type = 'Saving';

-- 2. Display the data using Natural, left and right join.
-- Natural Join
SELECT * FROM Customer NATURAL JOIN Account;
-- Left Join
SELECT * FROM Customer LEFT JOIN Account ON Customer.C_Id = Account.C_Id;
-- Right Join
SELECT * FROM Customer RIGHT JOIN Account ON Customer.C_Id = Account.C_Id;

-- 3. Display the information of customers living in the same city as of 'pooja'.
SELECT * FROM Customer WHERE City = (SELECT City FROM Customer WHERE Cname = 'Pooja');

-- 4. Display the information of account, having less amount than average amount throughout the bank.
SELECT * FROM Account WHERE Amount < (SELECT AVG(Amount) FROM Account);

-- 5. Display the C_id having maximum amount in account.
SELECT C_Id FROM Account ORDER BY Amount DESC LIMIT 1;

-- 6. Display the amount and acc_type of those customers whose amount is the minimum amount of that Acc_type.
SELECT a.Amount, a.Acc_Type
FROM Account a
JOIN (
    SELECT Acc_Type, MIN(Amount) AS min_amount
    FROM Account
    GROUP BY Acc_Type
) AS min_amounts ON a.Acc_Type = min_amounts.Acc_Type AND a.Amount = min_amounts.min_amount;

-- 7. Display the amount of those accounts whose amount is higher than amount of any saving account amount.
SELECT Amount FROM Account WHERE Amount > (SELECT MAX(Amount) FROM Account WHERE Acc_Type = 'Saving');



---------------------------------------


Assign 8



SELECT DISTINCT i.name
FROM instructor i
JOIN teaches t ON i.T_ID = t.T_ID
ORDER BY t.semester, t.year;

2)
CREATE VIEW student_details AS
SELECT S_ID, name, dept_name, tot_cred
FROM student;

3)
ALTER TABLE student
CHANGE dept_name deptatrment_name VARCHAR(255);  -- Adjust VARCHAR length as necessary

4)
DELETE FROM student
WHERE deptatrment_name IS NULL;


-----------------------------------------

Assign 17

-- 1. Find different locations from where employees belong to?
SELECT DISTINCT Address FROM Employee;

-- 2. What is maximum and minimum salary?
SELECT MAX(Salary) AS Maximum_Salary, MIN(Salary) AS Minimum_Salary FROM Employee;

-- 3. Display the content of employee table according to the ascending order of salary amount.
SELECT * FROM Employee ORDER BY Salary;

-- 4. Find the name of employee who lived in Nasik or Pune city.
SELECT EName FROM Employee WHERE Address IN ('Nasik', 'Pune');

-- 5. Find the name of employees who does not get commission.
SELECT EName FROM Employee WHERE Commision = 0;

-- 6. Change the city of Amit to Nashik.
UPDATE Employee SET Address = 'Nashik' WHERE EName = 'Amit';

-- 7. Find the information of employees whose name starts with 'A'.
SELECT * FROM Employee WHERE EName LIKE 'A%';

-- 8. Find the count of staff from Mumbai.
SELECT COUNT(*) FROM Employee WHERE Address = 'Mumbai';

-- 9. Find the count of staff from each city
SELECT Address, COUNT(*) AS Staff_Count FROM Employee GROUP BY Address;

-- 10. Find the address from where employees are belonging as well as where projects are going on.
-- This question needs more information about the project table. Please provide the table schema for project table.

-- 11. Find city wise minimum salary.
SELECT Address, MIN(Salary) AS Minimum_Salary FROM Employee GROUP BY Address;

-- 12. Find city wise maximum salary having maximum salary greater than 26000
SELECT Address, MAX(Salary) AS Maximum_Salary FROM Employee WHERE Salary > 26000 GROUP BY Address;

-- 13. Delete the employee who is having salary greater than 30,000.
DELETE FROM Employee WHERE Salary > 30000;

----------------------------------

Assign 24

1)

UPDATE Company
SET city = 'Pune'
WHERE cname = 'ABC';

2)
UPDATE works
SET sal = CASE
    WHEN sal > 20000 THEN sal * 1.03
    ELSE sal * 1.10
END
WHERE cname = 'Mbank';


3)
SELECT DISTINCT e.ename
FROM Emp e
JOIN works w ON e.emp_id = w.emp_id
JOIN Company c ON w.c_id = c.c_id
WHERE c.cname = 'Bosch' AND c.city = 'Pune';

4)
DELETE FROM works
WHERE c_id = (SELECT c_id FROM Company WHERE cname = 'SBC')
AND sal > 50000;

-----------------------------

Assign 25

1)
SELECT *
FROM Duty-alloc
WHERE e_no = 123 AND shift = 'first' AND month = 'April' AND year = 2003;

2)
SELECT *
FROM Empl
WHERE pay_rate >= (SELECT pay_rate FROM Empl WHERE e_name = 'Sachin');

3)
CREATE VIEW salary_statistics AS
SELECT p.post, 
       MIN(e.pay_rate) AS min_salary,
       MAX(e.pay_rate) AS max_salary,
       AVG(e.pay_rate) AS avg_salary
FROM Empl e
JOIN Position p ON e.post = p.post
GROUP BY p.post;

4)
SELECT shift, COUNT(DISTINCT d.e_no) AS employee_count
FROM Duty-alloc d
JOIN Empl e ON d.e_no = e.e_no
WHERE e.post = 'manager'
GROUP BY shift;


-------------------------------------------------------------------------------------------------------

Assign 23

CREATE TABLE ACTOR (
    Act_id INT PRIMARY KEY,            -- Unique identifier for each actor
    Act_Name VARCHAR(100) NOT NULL,     -- Actor's name, cannot be NULL
    Act_Gender CHAR(1) CHECK (Act_Gender IN ('M', 'F'))  -- Gender of the actor (M = Male, F = Female)
);

CREATE TABLE DIRECTOR (
    Dir_id INT PRIMARY KEY,             -- Unique identifier for each director
    Dir_Name VARCHAR(100) NOT NULL,      -- Director's name, cannot be NULL
    Dir_Phone VARCHAR(15)               -- Director's phone number, can be NULL
);

CREATE TABLE MOVIES (
    Mov_id INT PRIMARY KEY,              -- Unique identifier for each movie
    Mov_Title VARCHAR(255) NOT NULL,      -- Title of the movie, cannot be NULL
    Mov_Year INT CHECK (Mov_Year >= 1900 AND Mov_Year <= YEAR(CURRENT_DATE)), -- Year of the movie
    Mov_Lang VARCHAR(50),                 -- Language of the movie
    Dir_id INT,                           -- Director ID (foreign key)
    FOREIGN KEY (Dir_id) REFERENCES DIRECTOR(Dir_id)  -- Foreign key referencing the DIRECTOR table
);

CREATE TABLE MOVIE_CAST (
    Act_id INT,                           -- Actor ID (foreign key)
    Mov_id INT,                           -- Movie ID (foreign key)
    Role VARCHAR(100),                    -- Actor's role in the movie
    PRIMARY KEY (Act_id, Mov_id),         -- Composite primary key
    FOREIGN KEY (Act_id) REFERENCES ACTOR(Act_id),  -- Foreign key referencing the ACTOR table
    FOREIGN KEY (Mov_id) REFERENCES MOVIES(Mov_id)  -- Foreign key referencing the MOVIES table
);

CREATE TABLE RATING (
    Mov_id INT,                           -- Movie ID (foreign key)
    Rev_Stars DECIMAL(2, 1) CHECK (Rev_Stars BETWEEN 0 AND 5),  -- Rating stars (0 to 5 scale)
    PRIMARY KEY (Mov_id),                 -- Primary key on the movie ID
    FOREIGN KEY (Mov_id) REFERENCES MOVIES(Mov_id)  -- Foreign key referencing the MOVIES table
);


INSERT INTO ACTOR (Act_id, Act_Name, Act_Gender)
VALUES 
(1, 'Robert Downey Jr.', 'M'),
(2, 'Scarlett Johansson', 'F'),
(3, 'Morgan Freeman', 'M'),
(4, 'Helen Mirren', 'F'),
(5, 'Matt Damon', 'M'),
(6, 'Cate Blanchett', 'F');


INSERT INTO DIRECTOR (Dir_id, Dir_Name, Dir_Phone)
VALUES
(1, 'Steven Spielberg', '555-1234'),
(2, 'Christopher Nolan', '555-5678'),
(3, 'Alfred Hitchcock', '555-8765'),
(4, 'Martin Scorsese', '555-1122');

INSERT INTO MOVIES (Mov_id, Mov_Title, Mov_Year, Mov_Lang, Dir_id)
VALUES
(1, 'Jurassic Park', 1993, 'English', 1),
(2, 'Inception', 2010, 'English', 2),
(3, 'Psycho', 1960, 'English', 3),
(4, 'Shutter Island', 2010, 'English', 2),
(5, 'Taxi Driver', 1976, 'English', 4),
(6, 'The Aviator', 2004, 'English', 4);

INSERT INTO MOVIE_CAST (Act_id, Mov_id, Role)
VALUES
(1, 1, 'Dr. Alan Grant'),
(2, 1, 'Dr. Ellie Sattler'),
(1, 2, 'Tony Stark'),
(2, 2, 'Natasha Romanoff'),
(3, 3, 'Norman Bates'),
(4, 3, 'Marion Crane'),
(5, 4, 'Teddy Daniels'),
(6, 4, 'Dolly'),
(1, 5, 'Travis Bickle'),
(2, 5, 'Iris'),
(4, 6, 'Howard Hughes'),
(6, 6, 'Ava Gardner');

INSERT INTO RATING (Mov_id, Rev_Stars)
VALUES
(1, 4.5),
(2, 4.7),
(3, 4.8),
(4, 4.3),
(5, 4.0),
(6, 4.2);


. List the titles of all movies directed by ‘Hitchcock’.

SELECT M.Mov_Title
FROM MOVIES M
JOIN DIRECTOR D ON M.Dir_id = D.Dir_id
WHERE D.Dir_Name = 'Hitchcock';


2. Find the movie names where one or more actors acted in two or more movies.

SELECT M.Mov_Title
FROM MOVIES M
JOIN MOVIE_CAST MC ON M.Mov_id = MC.Mov_id
WHERE MC.Act_id IN (
    SELECT Act_id
    FROM MOVIE_CAST
    GROUP BY Act_id
    HAVING COUNT(DISTINCT Mov_id) >= 2
);


 List all actors who acted in a movie before 2000 and also in a movie after 2015 (use JOIN operation).

SELECT DISTINCT A.Act_Name
FROM ACTOR A
JOIN MOVIE_CAST MC1 ON A.Act_id = MC1.Act_id
JOIN MOVIES M1 ON MC1.Mov_id = M1.Mov_id
JOIN MOVIE_CAST MC2 ON A.Act_id = MC2.Act_id
JOIN MOVIES M2 ON MC2.Mov_id = M2.Mov_id
WHERE M1.Mov_Year < 2000 AND M2.Mov_Year > 2015;

4. Find the title of movies and number of stars for each movie that has at least one rating. Sort the result by movie title.

SELECT M.Mov_Title, R.Rev_Stars
FROM MOVIES M
JOIN RATING R ON M.Mov_id = R.Mov_id
ORDER BY M.Mov_Title;

5. Update rating of all movies directed by ‘Steven Spielberg’ to 5.

UPDATE RATING R
SET R.Rev_Stars = 5
WHERE R.Mov_id IN (
    SELECT M.Mov_id
    FROM MOVIES M
    JOIN DIRECTOR D ON M.Dir_id = D.Dir_id
    WHERE D.Dir_Name = 'Steven Spielberg'
);



-----------------------------------------------------------------------------------
Assign 10

CREATE TABLE Account (
    Acc_no INT PRIMARY KEY,
    branch_name VARCHAR(50) NOT NULL,
    balance DECIMAL(10, 2) CHECK (balance >= 0),
    FOREIGN KEY (branch_name) REFERENCES branch(branch_name)
);

CREATE TABLE branch (
    branch_name VARCHAR(50) PRIMARY KEY,
    branch_city VARCHAR(50),
    assets DECIMAL(15, 2) CHECK (assets >= 0)
);

CREATE TABLE customer (
    cust_name VARCHAR(50) PRIMARY KEY,
    cust_street VARCHAR(100),
    cust_city VARCHAR(50)
);

CREATE TABLE Depositor (
    cust_name VARCHAR(50),
    acc_no INT,
    PRIMARY KEY (cust_name, acc_no),
    FOREIGN KEY (cust_name) REFERENCES customer(cust_name),
    FOREIGN KEY (acc_no) REFERENCES Account(Acc_no)
);

CREATE TABLE Loan (
    loan_no INT PRIMARY KEY,
    branch_name VARCHAR(50),
    amount DECIMAL(10, 2) CHECK (amount > 0),
    FOREIGN KEY (branch_name) REFERENCES branch(branch_name)
);

CREATE TABLE Borrower (
    cust_name VARCHAR(50),
    loan_no INT,
    PRIMARY KEY (cust_name, loan_no),
    FOREIGN KEY (cust_name) REFERENCES customer(cust_name),
    FOREIGN KEY (loan_no) REFERENCES Loan(loan_no)
);


-- Inserting sample data
INSERT INTO branch (branch_name, branch_city, assets) VALUES 
('Akurdi', 'Pune', 5000000.00),
('Kalyani Nagar', 'Pune', 3000000.00);

INSERT INTO Account (Acc_no, branch_name, balance) VALUES 
(101, 'Akurdi', 15000.00),
(102, 'Kalyani Nagar', 8000.00),
(103, 'Akurdi', 25000.00);

INSERT INTO customer (cust_name, cust_street, cust_city) VALUES
('John Doe', '123 Elm St', 'Pune'),
('Jane Smith', '456 Oak St', 'Pune');

INSERT INTO Depositor (cust_name, acc_no) VALUES 
('John Doe', 101),
('Jane Smith', 102),
('John Doe', 103);

INSERT INTO Loan (loan_no, branch_name, amount) VALUES 
(1001, 'Akurdi', 15000.00),
(1002, 'Akurdi', 20000.00),
(1003, 'Kalyani Nagar', 10000.00);

INSERT INTO Borrower (cust_name, loan_no) VALUES 
('John Doe', 1001),
('Jane Smith', 1002);



Find the names of all branches in the loan relation.

SELECT DISTINCT branch_name FROM Loan;

Q2. Find all loan numbers for loans made at Akurdi Branch with loan amount > 12000.


SELECT loan_no
FROM Loan
WHERE branch_name = 'Akurdi' AND amount > 12000;

Q3. Find all customers who have a loan from the bank. Find their names, loan_no, and loan amount.


SELECT b.cust_name, l.loan_no, l.amount
FROM Borrower b
JOIN Loan l ON b.loan_no = l.loan_no;

Q4. List all customers in alphabetical order who have a loan from Akurdi branch.


SELECT b.cust_name
FROM Borrower b
JOIN Loan l ON b.loan_no = l.loan_no
WHERE l.branch_name = 'Akurdi'
ORDER BY b.cust_name;

Q5. Find all customers who have an account or loan or both at the bank.


SELECT DISTINCT cust_name
FROM (
    SELECT cust_name FROM Depositor
    UNION
    SELECT cust_name FROM Borrower
) AS customers;

\
Q6. Find all customers who have both an account and a loan at the bank.


SELECT DISTINCT d.cust_name
FROM Depositor d
JOIN Borrower b ON d.cust_name = b.cust_name;

Q7. Find all customers who have an account but no loan at the bank.


SELECT DISTINCT d.cust_name
FROM Depositor d
LEFT JOIN Borrower b ON d.cust_name = b.cust_name
WHERE b.cust_name IS NULL;

Q8. Find average account balance at Akurdi branch.


SELECT AVG(balance) AS avg_balance
FROM Account
WHERE branch_name = 'Akurdi';

Q9. Find the average account balance at each branch.


SELECT branch_name, AVG(balance) AS avg_balance
FROM Account
GROUP BY branch_name;

Q10. Find number of depositors at each branch.


SELECT a.branch_name, COUNT(DISTINCT d.cust_name) AS num_depositors
FROM Account a
JOIN Depositor d ON a.Acc_no = d.acc_no
GROUP BY a.branch_name;

Q11. Find the branches where the average account balance > 12000.


SELECT branch_name
FROM Account
GROUP BY branch_name
HAVING AVG(balance) > 12000;