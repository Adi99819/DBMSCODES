CREATE TABLE Account (
    Acc_no INT PRIMARY KEY,
    branch_name VARCHAR(50) NOT NULL,
    balance DECIMAL(10, 2) CHECK (balance >= 0),
    FOREIGN KEY (branch_name) REFERENCES branch(branch_name)
);

CREATE TABLE branch (
    branch_name VARCHAR(50) PRIMARY KEY,
    branch_city VARCHAR(50),
    assets DECIMAL(15, 2) CHECK (assets >= 0)
);

CREATE TABLE customer (
    cust_name VARCHAR(50) PRIMARY KEY,
    cust_street VARCHAR(100),
    cust_city VARCHAR(50)
);

CREATE TABLE Depositor (
    cust_name VARCHAR(50),
    acc_no INT,
    PRIMARY KEY (cust_name, acc_no),
    FOREIGN KEY (cust_name) REFERENCES customer(cust_name),
    FOREIGN KEY (acc_no) REFERENCES Account(Acc_no)
);

CREATE TABLE Loan (
    loan_no INT PRIMARY KEY,
    branch_name VARCHAR(50),
    amount DECIMAL(10, 2) CHECK (amount > 0),
    FOREIGN KEY (branch_name) REFERENCES branch(branch_name)
);

CREATE TABLE Borrower (
    cust_name VARCHAR(50),
    loan_no INT,
    PRIMARY KEY (cust_name, loan_no),
    FOREIGN KEY (cust_name) REFERENCES customer(cust_name),
    FOREIGN KEY (loan_no) REFERENCES Loan(loan_no)
);


-- Inserting sample data
INSERT INTO branch (branch_name, branch_city, assets) VALUES 
('Akurdi', 'Pune', 5000000.00),
('Kalyani Nagar', 'Pune', 3000000.00);

INSERT INTO Account (Acc_no, branch_name, balance) VALUES 
(101, 'Akurdi', 15000.00),
(102, 'Kalyani Nagar', 8000.00),
(103, 'Akurdi', 25000.00);

INSERT INTO customer (cust_name, cust_street, cust_city) VALUES
('John Doe', '123 Elm St', 'Pune'),
('Jane Smith', '456 Oak St', 'Pune');

INSERT INTO Depositor (cust_name, acc_no) VALUES 
('John Doe', 101),
('Jane Smith', 102),
('John Doe', 103);

INSERT INTO Loan (loan_no, branch_name, amount) VALUES 
(1001, 'Akurdi', 15000.00),
(1002, 'Akurdi', 20000.00),
(1003, 'Kalyani Nagar', 10000.00);

INSERT INTO Borrower (cust_name, loan_no) VALUES 
('John Doe', 1001),
('Jane Smith', 1002);



Find the names of all branches in the loan relation.

SELECT DISTINCT branch_name FROM Loan;

Q2. Find all loan numbers for loans made at Akurdi Branch with loan amount > 12000.


SELECT loan_no
FROM Loan
WHERE branch_name = 'Akurdi' AND amount > 12000;

Q3. Find all customers who have a loan from the bank. Find their names, loan_no, and loan amount.


SELECT b.cust_name, l.loan_no, l.amount
FROM Borrower b
JOIN Loan l ON b.loan_no = l.loan_no;

Q4. List all customers in alphabetical order who have a loan from Akurdi branch.


SELECT b.cust_name
FROM Borrower b
JOIN Loan l ON b.loan_no = l.loan_no
WHERE l.branch_name = 'Akurdi'
ORDER BY b.cust_name;

Q5. Find all customers who have an account or loan or both at the bank.


SELECT DISTINCT cust_name
FROM (
    SELECT cust_name FROM Depositor
    UNION
    SELECT cust_name FROM Borrower
) AS customers;

\
Q6. Find all customers who have both an account and a loan at the bank.


SELECT DISTINCT d.cust_name
FROM Depositor d
JOIN Borrower b ON d.cust_name = b.cust_name;

Q7. Find all customers who have an account but no loan at the bank.


SELECT DISTINCT d.cust_name
FROM Depositor d
LEFT JOIN Borrower b ON d.cust_name = b.cust_name
WHERE b.cust_name IS NULL;

Q8. Find average account balance at Akurdi branch.


SELECT AVG(balance) AS avg_balance
FROM Account
WHERE branch_name = 'Akurdi';

Q9. Find the average account balance at each branch.


SELECT branch_name, AVG(balance) AS avg_balance
FROM Account
GROUP BY branch_name;

Q10. Find number of depositors at each branch.


SELECT a.branch_name, COUNT(DISTINCT d.cust_name) AS num_depositors
FROM Account a
JOIN Depositor d ON a.Acc_no = d.acc_no
GROUP BY a.branch_name;

Q11. Find the branches where the average account balance > 12000.


SELECT branch_name
FROM Account
GROUP BY branch_name
HAVING AVG(balance) > 12000;